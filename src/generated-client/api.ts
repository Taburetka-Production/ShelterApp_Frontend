/* tslint:disable */
/* eslint-disable */
/**
 * Website for Shelters
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface AccessTokenResponse
 */
export interface AccessTokenResponse {
  /**
   *
   * @type {string}
   * @memberof AccessTokenResponse
   */
  tokenType?: string | null;
  /**
   *
   * @type {string}
   * @memberof AccessTokenResponse
   */
  accessToken: string | null;
  /**
   *
   * @type {number}
   * @memberof AccessTokenResponse
   */
  expiresIn: number;
  /**
   *
   * @type {string}
   * @memberof AccessTokenResponse
   */
  refreshToken: string | null;
}
/**
 *
 * @export
 * @interface Address
 */
export interface Address {
  /**
   *
   * @type {string}
   * @memberof Address
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  createdAtUtc: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  updatedAtUtc?: string | null;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  userLastModified?: string | null;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  country: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  region: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  district: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  city: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  street: string;
  /**
   *
   * @type {string}
   * @memberof Address
   */
  apartments: string;
  /**
   *
   * @type {number}
   * @memberof Address
   */
  lng: number;
  /**
   *
   * @type {number}
   * @memberof Address
   */
  lat: number;
}
/**
 *
 * @export
 * @interface AddressDto
 */
export interface AddressDto {
  /**
   *
   * @type {string}
   * @memberof AddressDto
   */
  country?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddressDto
   */
  region?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddressDto
   */
  district?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddressDto
   */
  city?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddressDto
   */
  street?: string | null;
  /**
   *
   * @type {string}
   * @memberof AddressDto
   */
  apartments?: string | null;
  /**
   *
   * @type {number}
   * @memberof AddressDto
   */
  lng?: number;
  /**
   *
   * @type {number}
   * @memberof AddressDto
   */
  lat?: number;
}
/**
 *
 * @export
 * @interface AdoptionRequest
 */
export interface AdoptionRequest {
  /**
   *
   * @type {string}
   * @memberof AdoptionRequest
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof AdoptionRequest
   */
  createdAtUtc: string;
  /**
   *
   * @type {string}
   * @memberof AdoptionRequest
   */
  updatedAtUtc?: string | null;
  /**
   *
   * @type {string}
   * @memberof AdoptionRequest
   */
  userLastModified?: string | null;
  /**
   *
   * @type {string}
   * @memberof AdoptionRequest
   */
  userId: string;
  /**
   *
   * @type {User}
   * @memberof AdoptionRequest
   */
  user?: User;
  /**
   *
   * @type {string}
   * @memberof AdoptionRequest
   */
  animalId: string;
  /**
   *
   * @type {Animal}
   * @memberof AdoptionRequest
   */
  animal?: Animal;
  /**
   *
   * @type {string}
   * @memberof AdoptionRequest
   */
  requestDate: string;
  /**
   *
   * @type {string}
   * @memberof AdoptionRequest
   */
  status: string;
}
/**
 *
 * @export
 * @interface Animal
 */
export interface Animal {
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  createdAtUtc: string;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  updatedAtUtc?: string | null;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  userLastModified?: string | null;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  species: string;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  breed: string;
  /**
   *
   * @type {number}
   * @memberof Animal
   */
  age: number;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  status: string;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  sex: string;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  size: string;
  /**
   *
   * @type {boolean}
   * @memberof Animal
   */
  sterilized: boolean;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  healthCondition?: string | null;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  shelterId: string;
  /**
   *
   * @type {Shelter}
   * @memberof Animal
   */
  shelter?: Shelter;
  /**
   *
   * @type {AdoptionRequest}
   * @memberof Animal
   */
  adoptionRequest?: AdoptionRequest;
  /**
   *
   * @type {string}
   * @memberof Animal
   */
  slug: string;
  /**
   *
   * @type {Array<AnimalPhoto>}
   * @memberof Animal
   */
  photos?: Array<AnimalPhoto> | null;
  /**
   *
   * @type {Array<UsersAnimal>}
   * @memberof Animal
   */
  usersAnimal?: Array<UsersAnimal> | null;
}
/**
 *
 * @export
 * @interface AnimalPhoto
 */
export interface AnimalPhoto {
  /**
   *
   * @type {string}
   * @memberof AnimalPhoto
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof AnimalPhoto
   */
  createdAtUtc: string;
  /**
   *
   * @type {string}
   * @memberof AnimalPhoto
   */
  updatedAtUtc?: string | null;
  /**
   *
   * @type {string}
   * @memberof AnimalPhoto
   */
  userLastModified?: string | null;
  /**
   *
   * @type {string}
   * @memberof AnimalPhoto
   */
  photoUrl: string;
  /**
   *
   * @type {string}
   * @memberof AnimalPhoto
   */
  animalId?: string;
  /**
   *
   * @type {Animal}
   * @memberof AnimalPhoto
   */
  animal?: Animal;
}
/**
 *
 * @export
 * @interface AnimalSummaryDto
 */
export interface AnimalSummaryDto {
  /**
   *
   * @type {string}
   * @memberof AnimalSummaryDto
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof AnimalSummaryDto
   */
  species?: string | null;
  /**
   *
   * @type {string}
   * @memberof AnimalSummaryDto
   */
  slug?: string | null;
  /**
   *
   * @type {string}
   * @memberof AnimalSummaryDto
   */
  primaryPhotoUrl?: string | null;
  /**
   *
   * @type {string}
   * @memberof AnimalSummaryDto
   */
  description?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof AnimalSummaryDto
   */
  isSaved?: boolean;
}
/**
 *
 * @export
 * @interface CreateAnimalDto
 */
export interface CreateAnimalDto {
  /**
   *
   * @type {string}
   * @memberof CreateAnimalDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateAnimalDto
   */
  species: string;
  /**
   *
   * @type {string}
   * @memberof CreateAnimalDto
   */
  breed?: string | null;
  /**
   *
   * @type {number}
   * @memberof CreateAnimalDto
   */
  age?: number | null;
  /**
   *
   * @type {string}
   * @memberof CreateAnimalDto
   */
  shelterId: string;
  /**
   *
   * @type {string}
   * @memberof CreateAnimalDto
   */
  sex: string;
  /**
   *
   * @type {string}
   * @memberof CreateAnimalDto
   */
  size: string;
  /**
   *
   * @type {boolean}
   * @memberof CreateAnimalDto
   */
  sterilized: boolean;
  /**
   *
   * @type {string}
   * @memberof CreateAnimalDto
   */
  healthCondition: string;
  /**
   *
   * @type {string}
   * @memberof CreateAnimalDto
   */
  description: string;
  /**
   *
   * @type {Array<string>}
   * @memberof CreateAnimalDto
   */
  photoUrls?: Array<string> | null;
}
/**
 *
 * @export
 * @interface CreateShelterDto
 */
export interface CreateShelterDto {
  /**
   *
   * @type {string}
   * @memberof CreateShelterDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof CreateShelterDto
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof CreateShelterDto
   */
  imageUrl: string;
  /**
   *
   * @type {string}
   * @memberof CreateShelterDto
   */
  country: string;
  /**
   *
   * @type {string}
   * @memberof CreateShelterDto
   */
  region: string;
  /**
   *
   * @type {string}
   * @memberof CreateShelterDto
   */
  district: string;
  /**
   *
   * @type {string}
   * @memberof CreateShelterDto
   */
  city: string;
  /**
   *
   * @type {string}
   * @memberof CreateShelterDto
   */
  street: string;
  /**
   *
   * @type {string}
   * @memberof CreateShelterDto
   */
  apartments: string;
  /**
   *
   * @type {number}
   * @memberof CreateShelterDto
   */
  lng: number;
  /**
   *
   * @type {number}
   * @memberof CreateShelterDto
   */
  lat: number;
}
/**
 *
 * @export
 * @interface CreateShelterFeedbackDto
 */
export interface CreateShelterFeedbackDto {
  /**
   *
   * @type {string}
   * @memberof CreateShelterFeedbackDto
   */
  comment: string;
  /**
   *
   * @type {number}
   * @memberof CreateShelterFeedbackDto
   */
  rating: number;
}
/**
 *
 * @export
 * @interface ForgotPasswordRequest
 */
export interface ForgotPasswordRequest {
  /**
   *
   * @type {string}
   * @memberof ForgotPasswordRequest
   */
  email: string | null;
}
/**
 *
 * @export
 * @interface HttpValidationProblemDetails
 */
export interface HttpValidationProblemDetails {
  [key: string]: any;

  /**
   *
   * @type {string}
   * @memberof HttpValidationProblemDetails
   */
  type?: string | null;
  /**
   *
   * @type {string}
   * @memberof HttpValidationProblemDetails
   */
  title?: string | null;
  /**
   *
   * @type {number}
   * @memberof HttpValidationProblemDetails
   */
  status?: number | null;
  /**
   *
   * @type {string}
   * @memberof HttpValidationProblemDetails
   */
  detail?: string | null;
  /**
   *
   * @type {string}
   * @memberof HttpValidationProblemDetails
   */
  instance?: string | null;
  /**
   *
   * @type {{ [key: string]: Array<string>; }}
   * @memberof HttpValidationProblemDetails
   */
  errors?: { [key: string]: Array<string> } | null;
}
/**
 *
 * @export
 * @interface InfoRequest
 */
export interface InfoRequest {
  /**
   *
   * @type {string}
   * @memberof InfoRequest
   */
  newEmail?: string | null;
  /**
   *
   * @type {string}
   * @memberof InfoRequest
   */
  newPassword?: string | null;
  /**
   *
   * @type {string}
   * @memberof InfoRequest
   */
  oldPassword?: string | null;
}
/**
 *
 * @export
 * @interface InfoResponse
 */
export interface InfoResponse {
  /**
   *
   * @type {string}
   * @memberof InfoResponse
   */
  email: string | null;
  /**
   *
   * @type {boolean}
   * @memberof InfoResponse
   */
  isEmailConfirmed: boolean;
}
/**
 *
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  email: string | null;
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  password: string | null;
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  twoFactorCode?: string | null;
  /**
   *
   * @type {string}
   * @memberof LoginRequest
   */
  twoFactorRecoveryCode?: string | null;
}
/**
 *
 * @export
 * @interface RefreshRequest
 */
export interface RefreshRequest {
  /**
   *
   * @type {string}
   * @memberof RefreshRequest
   */
  refreshToken: string | null;
}
/**
 *
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
  /**
   *
   * @type {string}
   * @memberof RegisterRequest
   */
  email: string | null;
  /**
   *
   * @type {string}
   * @memberof RegisterRequest
   */
  password: string | null;
}
/**
 *
 * @export
 * @interface RegistrationDto
 */
export interface RegistrationDto {
  /**
   *
   * @type {string}
   * @memberof RegistrationDto
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof RegistrationDto
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof RegistrationDto
   */
  userName: string;
  /**
   *
   * @type {string}
   * @memberof RegistrationDto
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof RegistrationDto
   */
  surname: string;
  /**
   *
   * @type {number}
   * @memberof RegistrationDto
   */
  age: number;
  /**
   *
   * @type {string}
   * @memberof RegistrationDto
   */
  avatarUrl?: string | null;
  /**
   *
   * @type {string}
   * @memberof RegistrationDto
   */
  phoneNumber?: string | null;
}
/**
 *
 * @export
 * @interface ResendConfirmationEmailRequest
 */
export interface ResendConfirmationEmailRequest {
  /**
   *
   * @type {string}
   * @memberof ResendConfirmationEmailRequest
   */
  email: string | null;
}
/**
 *
 * @export
 * @interface ResetPasswordRequest
 */
export interface ResetPasswordRequest {
  /**
   *
   * @type {string}
   * @memberof ResetPasswordRequest
   */
  email: string | null;
  /**
   *
   * @type {string}
   * @memberof ResetPasswordRequest
   */
  resetCode: string | null;
  /**
   *
   * @type {string}
   * @memberof ResetPasswordRequest
   */
  newPassword: string | null;
}
/**
 *
 * @export
 * @interface Shelter
 */
export interface Shelter {
  /**
   *
   * @type {string}
   * @memberof Shelter
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Shelter
   */
  createdAtUtc: string;
  /**
   *
   * @type {string}
   * @memberof Shelter
   */
  updatedAtUtc?: string | null;
  /**
   *
   * @type {string}
   * @memberof Shelter
   */
  userLastModified?: string | null;
  /**
   *
   * @type {string}
   * @memberof Shelter
   */
  name: string;
  /**
   *
   * @type {number}
   * @memberof Shelter
   */
  rating: number;
  /**
   *
   * @type {number}
   * @memberof Shelter
   */
  reviewsCount: number;
  /**
   *
   * @type {number}
   * @memberof Shelter
   */
  animalsCount: number;
  /**
   *
   * @type {string}
   * @memberof Shelter
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof Shelter
   */
  imageUrl: string;
  /**
   *
   * @type {string}
   * @memberof Shelter
   */
  addressId: string;
  /**
   *
   * @type {Address}
   * @memberof Shelter
   */
  address?: Address;
  /**
   *
   * @type {string}
   * @memberof Shelter
   */
  userId: string;
  /**
   *
   * @type {User}
   * @memberof Shelter
   */
  user?: User;
  /**
   *
   * @type {string}
   * @memberof Shelter
   */
  slug: string;
  /**
   *
   * @type {Array<Animal>}
   * @memberof Shelter
   */
  animals?: Array<Animal> | null;
  /**
   *
   * @type {Array<UsersShelter>}
   * @memberof Shelter
   */
  usersShelters?: Array<UsersShelter> | null;
  /**
   *
   * @type {Array<ShelterFeedback>}
   * @memberof Shelter
   */
  shelterFeedbacks?: Array<ShelterFeedback> | null;
}
/**
 *
 * @export
 * @interface ShelterDetailDto
 */
export interface ShelterDetailDto {
  /**
   *
   * @type {string}
   * @memberof ShelterDetailDto
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ShelterDetailDto
   */
  name?: string | null;
  /**
   *
   * @type {number}
   * @memberof ShelterDetailDto
   */
  rating?: number;
  /**
   *
   * @type {number}
   * @memberof ShelterDetailDto
   */
  reviewsCount?: number;
  /**
   *
   * @type {number}
   * @memberof ShelterDetailDto
   */
  animalsCount?: number;
  /**
   *
   * @type {string}
   * @memberof ShelterDetailDto
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShelterDetailDto
   */
  imageUrl?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShelterDetailDto
   */
  slug?: string | null;
  /**
   *
   * @type {AddressDto}
   * @memberof ShelterDetailDto
   */
  address?: AddressDto;
  /**
   *
   * @type {boolean}
   * @memberof ShelterDetailDto
   */
  isSaved?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof ShelterDetailDto
   */
  hasSubmittedFeedback?: boolean;
  /**
   *
   * @type {Array<AnimalSummaryDto>}
   * @memberof ShelterDetailDto
   */
  animals?: Array<AnimalSummaryDto> | null;
  /**
   *
   * @type {Array<ShelterFeedbackDto>}
   * @memberof ShelterDetailDto
   */
  feedbacks?: Array<ShelterFeedbackDto> | null;
}
/**
 *
 * @export
 * @interface ShelterFeedback
 */
export interface ShelterFeedback {
  /**
   *
   * @type {string}
   * @memberof ShelterFeedback
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof ShelterFeedback
   */
  createdAtUtc: string;
  /**
   *
   * @type {string}
   * @memberof ShelterFeedback
   */
  updatedAtUtc?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShelterFeedback
   */
  userLastModified?: string | null;
  /**
   *
   * @type {string}
   * @memberof ShelterFeedback
   */
  userId: string;
  /**
   *
   * @type {User}
   * @memberof ShelterFeedback
   */
  user?: User;
  /**
   *
   * @type {string}
   * @memberof ShelterFeedback
   */
  shelterId: string;
  /**
   *
   * @type {Shelter}
   * @memberof ShelterFeedback
   */
  shelter?: Shelter;
  /**
   *
   * @type {string}
   * @memberof ShelterFeedback
   */
  comment: string;
  /**
   *
   * @type {number}
   * @memberof ShelterFeedback
   */
  rating: number;
}
/**
 *
 * @export
 * @interface ShelterFeedbackDto
 */
export interface ShelterFeedbackDto {
  /**
   *
   * @type {string}
   * @memberof ShelterFeedbackDto
   */
  comment?: string | null;
  /**
   *
   * @type {number}
   * @memberof ShelterFeedbackDto
   */
  rating?: number;
  /**
   *
   * @type {UserSummaryDto}
   * @memberof ShelterFeedbackDto
   */
  user?: UserSummaryDto;
  /**
   *
   * @type {string}
   * @memberof ShelterFeedbackDto
   */
  createdAtUtc?: string;
}
/**
 *
 * @export
 * @interface TemporaryCreateShelterInputModel
 */
export interface TemporaryCreateShelterInputModel {
  /**
   *
   * @type {string}
   * @memberof TemporaryCreateShelterInputModel
   */
  userId: string;
  /**
   *
   * @type {string}
   * @memberof TemporaryCreateShelterInputModel
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof TemporaryCreateShelterInputModel
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof TemporaryCreateShelterInputModel
   */
  imageUrl: string;
  /**
   *
   * @type {string}
   * @memberof TemporaryCreateShelterInputModel
   */
  country: string;
  /**
   *
   * @type {string}
   * @memberof TemporaryCreateShelterInputModel
   */
  region: string;
  /**
   *
   * @type {string}
   * @memberof TemporaryCreateShelterInputModel
   */
  district?: string | null;
  /**
   *
   * @type {string}
   * @memberof TemporaryCreateShelterInputModel
   */
  city: string;
  /**
   *
   * @type {string}
   * @memberof TemporaryCreateShelterInputModel
   */
  street: string;
  /**
   *
   * @type {string}
   * @memberof TemporaryCreateShelterInputModel
   */
  apartments?: string | null;
  /**
   *
   * @type {number}
   * @memberof TemporaryCreateShelterInputModel
   */
  lng: number;
  /**
   *
   * @type {number}
   * @memberof TemporaryCreateShelterInputModel
   */
  lat: number;
}
/**
 *
 * @export
 * @interface TransferAdminDto
 */
export interface TransferAdminDto {
  /**
   *
   * @type {string}
   * @memberof TransferAdminDto
   */
  newAdminEmail: string;
}
/**
 *
 * @export
 * @interface TwoFactorRequest
 */
export interface TwoFactorRequest {
  /**
   *
   * @type {boolean}
   * @memberof TwoFactorRequest
   */
  enable?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof TwoFactorRequest
   */
  twoFactorCode?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof TwoFactorRequest
   */
  resetSharedKey?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof TwoFactorRequest
   */
  resetRecoveryCodes?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof TwoFactorRequest
   */
  forgetMachine?: boolean;
}
/**
 *
 * @export
 * @interface TwoFactorResponse
 */
export interface TwoFactorResponse {
  /**
   *
   * @type {string}
   * @memberof TwoFactorResponse
   */
  sharedKey: string | null;
  /**
   *
   * @type {number}
   * @memberof TwoFactorResponse
   */
  recoveryCodesLeft: number;
  /**
   *
   * @type {Array<string>}
   * @memberof TwoFactorResponse
   */
  recoveryCodes?: Array<string> | null;
  /**
   *
   * @type {boolean}
   * @memberof TwoFactorResponse
   */
  isTwoFactorEnabled: boolean;
  /**
   *
   * @type {boolean}
   * @memberof TwoFactorResponse
   */
  isMachineRemembered: boolean;
}
/**
 *
 * @export
 * @interface UpdateAddressDto
 */
export interface UpdateAddressDto {
  /**
   *
   * @type {string}
   * @memberof UpdateAddressDto
   */
  country?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAddressDto
   */
  region?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAddressDto
   */
  district?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAddressDto
   */
  city?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAddressDto
   */
  street?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAddressDto
   */
  apartments?: string | null;
  /**
   *
   * @type {number}
   * @memberof UpdateAddressDto
   */
  lng?: number;
  /**
   *
   * @type {number}
   * @memberof UpdateAddressDto
   */
  lat?: number;
}
/**
 *
 * @export
 * @interface UpdateAnimalDto
 */
export interface UpdateAnimalDto {
  /**
   *
   * @type {string}
   * @memberof UpdateAnimalDto
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAnimalDto
   */
  species?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAnimalDto
   */
  breed?: string | null;
  /**
   *
   * @type {number}
   * @memberof UpdateAnimalDto
   */
  age?: number | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAnimalDto
   */
  sex?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAnimalDto
   */
  size?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof UpdateAnimalDto
   */
  sterilized?: boolean | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAnimalDto
   */
  healthCondition?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateAnimalDto
   */
  description?: string | null;
  /**
   *
   * @type {Array<string>}
   * @memberof UpdateAnimalDto
   */
  newPhotoUrls?: Array<string> | null;
}
/**
 *
 * @export
 * @interface UpdateShelterDto
 */
export interface UpdateShelterDto {
  /**
   *
   * @type {string}
   * @memberof UpdateShelterDto
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateShelterDto
   */
  description?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateShelterDto
   */
  imageUrl?: string | null;
  /**
   *
   * @type {UpdateAddressDto}
   * @memberof UpdateShelterDto
   */
  address?: UpdateAddressDto;
}
/**
 *
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
  /**
   *
   * @type {string}
   * @memberof UpdateUserDto
   */
  userName?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateUserDto
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateUserDto
   */
  surname?: string | null;
  /**
   *
   * @type {number}
   * @memberof UpdateUserDto
   */
  age?: number | null;
  /**
   *
   * @type {string}
   * @memberof UpdateUserDto
   */
  phoneNumber?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateUserDto
   */
  avatarUrl?: string | null;
  /**
   *
   * @type {string}
   * @memberof UpdateUserDto
   */
  email?: string | null;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  id?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  userName?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  normalizedUserName?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  normalizedEmail?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  emailConfirmed?: boolean;
  /**
   *
   * @type {string}
   * @memberof User
   */
  passwordHash?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  securityStamp?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  concurrencyStamp?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  phoneNumber?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  phoneNumberConfirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  twoFactorEnabled?: boolean;
  /**
   *
   * @type {string}
   * @memberof User
   */
  lockoutEnd?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  lockoutEnabled?: boolean;
  /**
   *
   * @type {number}
   * @memberof User
   */
  accessFailedCount?: number;
  /**
   *
   * @type {string}
   * @memberof User
   */
  avatarUrl?: string | null;
  /**
   *
   * @type {string}
   * @memberof User
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  surname: string;
  /**
   *
   * @type {number}
   * @memberof User
   */
  age: number;
  /**
   *
   * @type {Shelter}
   * @memberof User
   */
  shelter?: Shelter;
  /**
   *
   * @type {AdoptionRequest}
   * @memberof User
   */
  adoptionRequest?: AdoptionRequest;
  /**
   *
   * @type {Array<UsersShelter>}
   * @memberof User
   */
  usersShelters?: Array<UsersShelter> | null;
  /**
   *
   * @type {Array<ShelterFeedback>}
   * @memberof User
   */
  userFeedbacks?: Array<ShelterFeedback> | null;
  /**
   *
   * @type {Array<UsersAnimal>}
   * @memberof User
   */
  usersAnimals?: Array<UsersAnimal> | null;
}
/**
 *
 * @export
 * @interface UserSummaryDto
 */
export interface UserSummaryDto {
  /**
   *
   * @type {string}
   * @memberof UserSummaryDto
   */
  username?: string | null;
  /**
   *
   * @type {string}
   * @memberof UserSummaryDto
   */
  avatarUrl?: string | null;
}
/**
 *
 * @export
 * @interface UsersAnimal
 */
export interface UsersAnimal {
  /**
   *
   * @type {string}
   * @memberof UsersAnimal
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof UsersAnimal
   */
  createdAtUtc: string;
  /**
   *
   * @type {string}
   * @memberof UsersAnimal
   */
  updatedAtUtc?: string | null;
  /**
   *
   * @type {string}
   * @memberof UsersAnimal
   */
  userLastModified?: string | null;
  /**
   *
   * @type {string}
   * @memberof UsersAnimal
   */
  animalId?: string;
  /**
   *
   * @type {Animal}
   * @memberof UsersAnimal
   */
  animal?: Animal;
  /**
   *
   * @type {string}
   * @memberof UsersAnimal
   */
  userId?: string | null;
  /**
   *
   * @type {User}
   * @memberof UsersAnimal
   */
  user?: User;
}
/**
 *
 * @export
 * @interface UsersShelter
 */
export interface UsersShelter {
  /**
   *
   * @type {string}
   * @memberof UsersShelter
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof UsersShelter
   */
  createdAtUtc: string;
  /**
   *
   * @type {string}
   * @memberof UsersShelter
   */
  updatedAtUtc?: string | null;
  /**
   *
   * @type {string}
   * @memberof UsersShelter
   */
  userLastModified?: string | null;
  /**
   *
   * @type {string}
   * @memberof UsersShelter
   */
  shelterId?: string;
  /**
   *
   * @type {Shelter}
   * @memberof UsersShelter
   */
  shelter?: Shelter;
  /**
   *
   * @type {string}
   * @memberof UsersShelter
   */
  userId?: string | null;
  /**
   *
   * @type {User}
   * @memberof UsersShelter
   */
  user?: User;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAccountInfoGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Account/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UpdateUserDto} [updateUserDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAccountInfoPut: async (
      updateUserDto?: UpdateUserDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Account/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUserDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RegistrationDto} [registrationDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAccountRegisterPost: async (
      registrationDto?: RegistrationDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Account/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        registrationDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAccountSavedItemsGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Account/saved-items`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAccountInfoGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAccountInfoGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AccountApi.apiAccountInfoGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {UpdateUserDto} [updateUserDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAccountInfoPut(
      updateUserDto?: UpdateUserDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAccountInfoPut(
          updateUserDto,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AccountApi.apiAccountInfoPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {RegistrationDto} [registrationDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAccountRegisterPost(
      registrationDto?: RegistrationDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAccountRegisterPost(
          registrationDto,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AccountApi.apiAccountRegisterPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAccountSavedItemsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAccountSavedItemsGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AccountApi.apiAccountSavedItemsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AccountApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAccountInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .apiAccountInfoGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UpdateUserDto} [updateUserDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAccountInfoPut(
      updateUserDto?: UpdateUserDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiAccountInfoPut(updateUserDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RegistrationDto} [registrationDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAccountRegisterPost(
      registrationDto?: RegistrationDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiAccountRegisterPost(registrationDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAccountSavedItemsGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiAccountSavedItemsGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public apiAccountInfoGet(options?: RawAxiosRequestConfig) {
    return AccountApiFp(this.configuration)
      .apiAccountInfoGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UpdateUserDto} [updateUserDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public apiAccountInfoPut(
    updateUserDto?: UpdateUserDto,
    options?: RawAxiosRequestConfig,
  ) {
    return AccountApiFp(this.configuration)
      .apiAccountInfoPut(updateUserDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RegistrationDto} [registrationDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public apiAccountRegisterPost(
    registrationDto?: RegistrationDto,
    options?: RawAxiosRequestConfig,
  ) {
    return AccountApiFp(this.configuration)
      .apiAccountRegisterPost(registrationDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public apiAccountSavedItemsGet(options?: RawAxiosRequestConfig) {
    return AccountApiFp(this.configuration)
      .apiAccountSavedItemsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AdoptionRequestsApi - axios parameter creator
 * @export
 */
export const AdoptionRequestsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAdoptionRequestsIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiAdoptionRequestsIdGet", "id", id);
      const localVarPath = `/api/AdoptionRequests/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {AdoptionRequest} [adoptionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAdoptionRequestsPost: async (
      adoptionRequest?: AdoptionRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/AdoptionRequests`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        adoptionRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdoptionRequestsApi - functional programming interface
 * @export
 */
export const AdoptionRequestsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AdoptionRequestsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAdoptionRequestsIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAdoptionRequestsIdGet(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AdoptionRequestsApi.apiAdoptionRequestsIdGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {AdoptionRequest} [adoptionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAdoptionRequestsPost(
      adoptionRequest?: AdoptionRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAdoptionRequestsPost(
          adoptionRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AdoptionRequestsApi.apiAdoptionRequestsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AdoptionRequestsApi - factory interface
 * @export
 */
export const AdoptionRequestsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AdoptionRequestsApiFp(configuration);
  return {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAdoptionRequestsIdGet(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiAdoptionRequestsIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {AdoptionRequest} [adoptionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAdoptionRequestsPost(
      adoptionRequest?: AdoptionRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiAdoptionRequestsPost(adoptionRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdoptionRequestsApi - object-oriented interface
 * @export
 * @class AdoptionRequestsApi
 * @extends {BaseAPI}
 */
export class AdoptionRequestsApi extends BaseAPI {
  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdoptionRequestsApi
   */
  public apiAdoptionRequestsIdGet(id: string, options?: RawAxiosRequestConfig) {
    return AdoptionRequestsApiFp(this.configuration)
      .apiAdoptionRequestsIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {AdoptionRequest} [adoptionRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdoptionRequestsApi
   */
  public apiAdoptionRequestsPost(
    adoptionRequest?: AdoptionRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return AdoptionRequestsApiFp(this.configuration)
      .apiAdoptionRequestsPost(adoptionRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * AnimalsApi - axios parameter creator
 * @export
 */
export const AnimalsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CreateAnimalDto} [createAnimalDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsAddAnimalPost: async (
      createAnimalDto?: CreateAnimalDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Animals/AddAnimal`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createAnimalDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [id]
     * @param {UpdateAnimalDto} [updateAnimalDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsChangeAnimalInfoPut: async (
      id?: string,
      updateAnimalDto?: UpdateAnimalDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Animals/ChangeAnimalInfo`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (id !== undefined) {
        localVarQueryParameter["id"] = id;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateAnimalDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {Array<CreateAnimalDto>} [createAnimalDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsCreateTemporaryBulkPost: async (
      createAnimalDto?: Array<CreateAnimalDto>,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Animals/create-temporary-bulk`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createAnimalDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Animals`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsIdDelete: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiAnimalsIdDelete", "id", id);
      const localVarPath = `/api/Animals/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsPopulateSlugsPost: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Animals/populate-slugs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsSlugGet: async (
      slug: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'slug' is not null or undefined
      assertParamExists("apiAnimalsSlugGet", "slug", slug);
      const localVarPath = `/api/Animals/{slug}`.replace(
        `{${"slug"}}`,
        encodeURIComponent(String(slug)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsSlugToggleSavePost: async (
      slug: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'slug' is not null or undefined
      assertParamExists("apiAnimalsSlugToggleSavePost", "slug", slug);
      const localVarPath = `/api/Animals/{slug}/toggle-save`.replace(
        `{${"slug"}}`,
        encodeURIComponent(String(slug)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AnimalsApi - functional programming interface
 * @export
 */
export const AnimalsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AnimalsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateAnimalDto} [createAnimalDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAnimalsAddAnimalPost(
      createAnimalDto?: CreateAnimalDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAnimalsAddAnimalPost(
          createAnimalDto,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalsApi.apiAnimalsAddAnimalPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [id]
     * @param {UpdateAnimalDto} [updateAnimalDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAnimalsChangeAnimalInfoPut(
      id?: string,
      updateAnimalDto?: UpdateAnimalDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAnimalsChangeAnimalInfoPut(
          id,
          updateAnimalDto,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalsApi.apiAnimalsChangeAnimalInfoPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {Array<CreateAnimalDto>} [createAnimalDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAnimalsCreateTemporaryBulkPost(
      createAnimalDto?: Array<CreateAnimalDto>,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAnimalsCreateTemporaryBulkPost(
          createAnimalDto,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalsApi.apiAnimalsCreateTemporaryBulkPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAnimalsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Animal>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAnimalsGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalsApi.apiAnimalsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAnimalsIdDelete(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAnimalsIdDelete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalsApi.apiAnimalsIdDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAnimalsPopulateSlugsPost(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAnimalsPopulateSlugsPost(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalsApi.apiAnimalsPopulateSlugsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAnimalsSlugGet(
      slug: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Animal>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAnimalsSlugGet(slug, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalsApi.apiAnimalsSlugGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAnimalsSlugToggleSavePost(
      slug: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiAnimalsSlugToggleSavePost(
          slug,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AnimalsApi.apiAnimalsSlugToggleSavePost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AnimalsApi - factory interface
 * @export
 */
export const AnimalsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AnimalsApiFp(configuration);
  return {
    /**
     *
     * @param {CreateAnimalDto} [createAnimalDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsAddAnimalPost(
      createAnimalDto?: CreateAnimalDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiAnimalsAddAnimalPost(createAnimalDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [id]
     * @param {UpdateAnimalDto} [updateAnimalDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsChangeAnimalInfoPut(
      id?: string,
      updateAnimalDto?: UpdateAnimalDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiAnimalsChangeAnimalInfoPut(id, updateAnimalDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {Array<CreateAnimalDto>} [createAnimalDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsCreateTemporaryBulkPost(
      createAnimalDto?: Array<CreateAnimalDto>,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiAnimalsCreateTemporaryBulkPost(createAnimalDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsGet(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<Animal>> {
      return localVarFp
        .apiAnimalsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsIdDelete(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiAnimalsIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsPopulateSlugsPost(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiAnimalsPopulateSlugsPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsSlugGet(
      slug: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Animal> {
      return localVarFp
        .apiAnimalsSlugGet(slug, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAnimalsSlugToggleSavePost(
      slug: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiAnimalsSlugToggleSavePost(slug, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AnimalsApi - object-oriented interface
 * @export
 * @class AnimalsApi
 * @extends {BaseAPI}
 */
export class AnimalsApi extends BaseAPI {
  /**
   *
   * @param {CreateAnimalDto} [createAnimalDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalsApi
   */
  public apiAnimalsAddAnimalPost(
    createAnimalDto?: CreateAnimalDto,
    options?: RawAxiosRequestConfig,
  ) {
    return AnimalsApiFp(this.configuration)
      .apiAnimalsAddAnimalPost(createAnimalDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [id]
   * @param {UpdateAnimalDto} [updateAnimalDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalsApi
   */
  public apiAnimalsChangeAnimalInfoPut(
    id?: string,
    updateAnimalDto?: UpdateAnimalDto,
    options?: RawAxiosRequestConfig,
  ) {
    return AnimalsApiFp(this.configuration)
      .apiAnimalsChangeAnimalInfoPut(id, updateAnimalDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {Array<CreateAnimalDto>} [createAnimalDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalsApi
   */
  public apiAnimalsCreateTemporaryBulkPost(
    createAnimalDto?: Array<CreateAnimalDto>,
    options?: RawAxiosRequestConfig,
  ) {
    return AnimalsApiFp(this.configuration)
      .apiAnimalsCreateTemporaryBulkPost(createAnimalDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalsApi
   */
  public apiAnimalsGet(options?: RawAxiosRequestConfig) {
    return AnimalsApiFp(this.configuration)
      .apiAnimalsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalsApi
   */
  public apiAnimalsIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return AnimalsApiFp(this.configuration)
      .apiAnimalsIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalsApi
   */
  public apiAnimalsPopulateSlugsPost(options?: RawAxiosRequestConfig) {
    return AnimalsApiFp(this.configuration)
      .apiAnimalsPopulateSlugsPost(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} slug
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalsApi
   */
  public apiAnimalsSlugGet(slug: string, options?: RawAxiosRequestConfig) {
    return AnimalsApiFp(this.configuration)
      .apiAnimalsSlugGet(slug, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} slug
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnimalsApi
   */
  public apiAnimalsSlugToggleSavePost(
    slug: string,
    options?: RawAxiosRequestConfig,
  ) {
    return AnimalsApiFp(this.configuration)
      .apiAnimalsSlugToggleSavePost(slug, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * HomeApi - axios parameter creator
 * @export
 */
export const HomeApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    infoGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rootGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rootPost: async (
      body?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        body,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HomeApi - functional programming interface
 * @export
 */
export const HomeApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HomeApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async infoGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.infoGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["HomeApi.infoGet"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rootGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.rootGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["HomeApi.rootGet"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async rootPost(
      body?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.rootPost(
        body,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["HomeApi.rootPost"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * HomeApi - factory interface
 * @export
 */
export const HomeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = HomeApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    infoGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .infoGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rootGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .rootGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rootPost(
      body?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .rootPost(body, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HomeApi - object-oriented interface
 * @export
 * @class HomeApi
 * @extends {BaseAPI}
 */
export class HomeApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HomeApi
   */
  public infoGet(options?: RawAxiosRequestConfig) {
    return HomeApiFp(this.configuration)
      .infoGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HomeApi
   */
  public rootGet(options?: RawAxiosRequestConfig) {
    return HomeApiFp(this.configuration)
      .rootGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [body]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HomeApi
   */
  public rootPost(body?: string, options?: RawAxiosRequestConfig) {
    return HomeApiFp(this.configuration)
      .rootPost(body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ShelterAppApi - axios parameter creator
 * @export
 */
export const ShelterAppApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {ForgotPasswordRequest} [forgotPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forgotPasswordPost: async (
      forgotPasswordRequest?: ForgotPasswordRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/forgotPassword`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        forgotPasswordRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {boolean} [useCookies]
     * @param {boolean} [useSessionCookies]
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginPost: async (
      useCookies?: boolean,
      useSessionCookies?: boolean,
      loginRequest?: LoginRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (useCookies !== undefined) {
        localVarQueryParameter["useCookies"] = useCookies;
      }

      if (useSessionCookies !== undefined) {
        localVarQueryParameter["useSessionCookies"] = useSessionCookies;
      }

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {TwoFactorRequest} [twoFactorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manage2faPost: async (
      twoFactorRequest?: TwoFactorRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/manage/2fa`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        twoFactorRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageInfoGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/manage/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {InfoRequest} [infoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageInfoPost: async (
      infoRequest?: InfoRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/manage/info`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        infoRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [userId]
     * @param {string} [code]
     * @param {string} [changedEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mapIdentityApiConfirmEmail: async (
      userId?: string,
      code?: string,
      changedEmail?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/confirmEmail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (userId !== undefined) {
        localVarQueryParameter["userId"] = userId;
      }

      if (code !== undefined) {
        localVarQueryParameter["code"] = code;
      }

      if (changedEmail !== undefined) {
        localVarQueryParameter["changedEmail"] = changedEmail;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RefreshRequest} [refreshRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshPost: async (
      refreshRequest?: RefreshRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/refresh`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        refreshRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RegisterRequest} [registerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerPost: async (
      registerRequest?: RegisterRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        registerRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendConfirmationEmailPost: async (
      resendConfirmationEmailRequest?: ResendConfirmationEmailRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/resendConfirmationEmail`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        resendConfirmationEmailRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {ResetPasswordRequest} [resetPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPasswordPost: async (
      resetPasswordRequest?: ResetPasswordRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/resetPassword`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        resetPasswordRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ShelterAppApi - functional programming interface
 * @export
 */
export const ShelterAppApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ShelterAppApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {ForgotPasswordRequest} [forgotPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async forgotPasswordPost(
      forgotPasswordRequest?: ForgotPasswordRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.forgotPasswordPost(
          forgotPasswordRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ShelterAppApi.forgotPasswordPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {boolean} [useCookies]
     * @param {boolean} [useSessionCookies]
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginPost(
      useCookies?: boolean,
      useSessionCookies?: boolean,
      loginRequest?: LoginRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AccessTokenResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(
        useCookies,
        useSessionCookies,
        loginRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ShelterAppApi.loginPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {TwoFactorRequest} [twoFactorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async manage2faPost(
      twoFactorRequest?: TwoFactorRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TwoFactorResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.manage2faPost(
        twoFactorRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ShelterAppApi.manage2faPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async manageInfoGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoResponse>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.manageInfoGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ShelterAppApi.manageInfoGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {InfoRequest} [infoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async manageInfoPost(
      infoRequest?: InfoRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InfoResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.manageInfoPost(
        infoRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ShelterAppApi.manageInfoPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [userId]
     * @param {string} [code]
     * @param {string} [changedEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async mapIdentityApiConfirmEmail(
      userId?: string,
      code?: string,
      changedEmail?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.mapIdentityApiConfirmEmail(
          userId,
          code,
          changedEmail,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ShelterAppApi.mapIdentityApiConfirmEmail"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {RefreshRequest} [refreshRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async refreshPost(
      refreshRequest?: RefreshRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<AccessTokenResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.refreshPost(
        refreshRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ShelterAppApi.refreshPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {RegisterRequest} [registerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async registerPost(
      registerRequest?: RegisterRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.registerPost(
        registerRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ShelterAppApi.registerPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resendConfirmationEmailPost(
      resendConfirmationEmailRequest?: ResendConfirmationEmailRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.resendConfirmationEmailPost(
          resendConfirmationEmailRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ShelterAppApi.resendConfirmationEmailPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {ResetPasswordRequest} [resetPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async resetPasswordPost(
      resetPasswordRequest?: ResetPasswordRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.resetPasswordPost(
          resetPasswordRequest,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ShelterAppApi.resetPasswordPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ShelterAppApi - factory interface
 * @export
 */
export const ShelterAppApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ShelterAppApiFp(configuration);
  return {
    /**
     *
     * @param {ForgotPasswordRequest} [forgotPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    forgotPasswordPost(
      forgotPasswordRequest?: ForgotPasswordRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .forgotPasswordPost(forgotPasswordRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {boolean} [useCookies]
     * @param {boolean} [useSessionCookies]
     * @param {LoginRequest} [loginRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginPost(
      useCookies?: boolean,
      useSessionCookies?: boolean,
      loginRequest?: LoginRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AccessTokenResponse> {
      return localVarFp
        .loginPost(useCookies, useSessionCookies, loginRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {TwoFactorRequest} [twoFactorRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manage2faPost(
      twoFactorRequest?: TwoFactorRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<TwoFactorResponse> {
      return localVarFp
        .manage2faPost(twoFactorRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<InfoResponse> {
      return localVarFp
        .manageInfoGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {InfoRequest} [infoRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manageInfoPost(
      infoRequest?: InfoRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<InfoResponse> {
      return localVarFp
        .manageInfoPost(infoRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [userId]
     * @param {string} [code]
     * @param {string} [changedEmail]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    mapIdentityApiConfirmEmail(
      userId?: string,
      code?: string,
      changedEmail?: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .mapIdentityApiConfirmEmail(userId, code, changedEmail, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RefreshRequest} [refreshRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshPost(
      refreshRequest?: RefreshRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<AccessTokenResponse> {
      return localVarFp
        .refreshPost(refreshRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RegisterRequest} [registerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerPost(
      registerRequest?: RegisterRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .registerPost(registerRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resendConfirmationEmailPost(
      resendConfirmationEmailRequest?: ResendConfirmationEmailRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .resendConfirmationEmailPost(resendConfirmationEmailRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ResetPasswordRequest} [resetPasswordRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resetPasswordPost(
      resetPasswordRequest?: ResetPasswordRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .resetPasswordPost(resetPasswordRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ShelterAppApi - object-oriented interface
 * @export
 * @class ShelterAppApi
 * @extends {BaseAPI}
 */
export class ShelterAppApi extends BaseAPI {
  /**
   *
   * @param {ForgotPasswordRequest} [forgotPasswordRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShelterAppApi
   */
  public forgotPasswordPost(
    forgotPasswordRequest?: ForgotPasswordRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ShelterAppApiFp(this.configuration)
      .forgotPasswordPost(forgotPasswordRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {boolean} [useCookies]
   * @param {boolean} [useSessionCookies]
   * @param {LoginRequest} [loginRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShelterAppApi
   */
  public loginPost(
    useCookies?: boolean,
    useSessionCookies?: boolean,
    loginRequest?: LoginRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ShelterAppApiFp(this.configuration)
      .loginPost(useCookies, useSessionCookies, loginRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {TwoFactorRequest} [twoFactorRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShelterAppApi
   */
  public manage2faPost(
    twoFactorRequest?: TwoFactorRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ShelterAppApiFp(this.configuration)
      .manage2faPost(twoFactorRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShelterAppApi
   */
  public manageInfoGet(options?: RawAxiosRequestConfig) {
    return ShelterAppApiFp(this.configuration)
      .manageInfoGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {InfoRequest} [infoRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShelterAppApi
   */
  public manageInfoPost(
    infoRequest?: InfoRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ShelterAppApiFp(this.configuration)
      .manageInfoPost(infoRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [userId]
   * @param {string} [code]
   * @param {string} [changedEmail]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShelterAppApi
   */
  public mapIdentityApiConfirmEmail(
    userId?: string,
    code?: string,
    changedEmail?: string,
    options?: RawAxiosRequestConfig,
  ) {
    return ShelterAppApiFp(this.configuration)
      .mapIdentityApiConfirmEmail(userId, code, changedEmail, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RefreshRequest} [refreshRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShelterAppApi
   */
  public refreshPost(
    refreshRequest?: RefreshRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ShelterAppApiFp(this.configuration)
      .refreshPost(refreshRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RegisterRequest} [registerRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShelterAppApi
   */
  public registerPost(
    registerRequest?: RegisterRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ShelterAppApiFp(this.configuration)
      .registerPost(registerRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ResendConfirmationEmailRequest} [resendConfirmationEmailRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShelterAppApi
   */
  public resendConfirmationEmailPost(
    resendConfirmationEmailRequest?: ResendConfirmationEmailRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ShelterAppApiFp(this.configuration)
      .resendConfirmationEmailPost(resendConfirmationEmailRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ResetPasswordRequest} [resetPasswordRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ShelterAppApi
   */
  public resetPasswordPost(
    resetPasswordRequest?: ResetPasswordRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ShelterAppApiFp(this.configuration)
      .resetPasswordPost(resetPasswordRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SheltersApi - axios parameter creator
 * @export
 */
export const SheltersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {TemporaryCreateShelterInputModel} [temporaryCreateShelterInputModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersCreateTemporaryPost: async (
      temporaryCreateShelterInputModel?: TemporaryCreateShelterInputModel,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Shelters/create-temporary`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        temporaryCreateShelterInputModel,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Shelters`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersIdDelete: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiSheltersIdDelete", "id", id);
      const localVarPath = `/api/Shelters/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {UpdateShelterDto} [updateShelterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersIdPut: async (
      id: string,
      updateShelterDto?: UpdateShelterDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiSheltersIdPut", "id", id);
      const localVarPath = `/api/Shelters/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateShelterDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersPopulateSlugsPost: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Shelters/populate-slugs`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {CreateShelterDto} [createShelterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersPost: async (
      createShelterDto?: CreateShelterDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Shelters`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createShelterDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} slug
     * @param {CreateShelterFeedbackDto} [createShelterFeedbackDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersSlugFeedbackPost: async (
      slug: string,
      createShelterFeedbackDto?: CreateShelterFeedbackDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'slug' is not null or undefined
      assertParamExists("apiSheltersSlugFeedbackPost", "slug", slug);
      const localVarPath = `/api/Shelters/{slug}/feedback`.replace(
        `{${"slug"}}`,
        encodeURIComponent(String(slug)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createShelterFeedbackDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersSlugGet: async (
      slug: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'slug' is not null or undefined
      assertParamExists("apiSheltersSlugGet", "slug", slug);
      const localVarPath = `/api/Shelters/{slug}`.replace(
        `{${"slug"}}`,
        encodeURIComponent(String(slug)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersSlugToggleSavePost: async (
      slug: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'slug' is not null or undefined
      assertParamExists("apiSheltersSlugToggleSavePost", "slug", slug);
      const localVarPath = `/api/Shelters/{slug}/toggle-save`.replace(
        `{${"slug"}}`,
        encodeURIComponent(String(slug)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SheltersApi - functional programming interface
 * @export
 */
export const SheltersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SheltersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {TemporaryCreateShelterInputModel} [temporaryCreateShelterInputModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSheltersCreateTemporaryPost(
      temporaryCreateShelterInputModel?: TemporaryCreateShelterInputModel,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shelter>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSheltersCreateTemporaryPost(
          temporaryCreateShelterInputModel,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SheltersApi.apiSheltersCreateTemporaryPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSheltersGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSheltersGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SheltersApi.apiSheltersGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSheltersIdDelete(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSheltersIdDelete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SheltersApi.apiSheltersIdDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {UpdateShelterDto} [updateShelterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSheltersIdPut(
      id: string,
      updateShelterDto?: UpdateShelterDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSheltersIdPut(
          id,
          updateShelterDto,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SheltersApi.apiSheltersIdPut"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSheltersPopulateSlugsPost(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSheltersPopulateSlugsPost(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SheltersApi.apiSheltersPopulateSlugsPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {CreateShelterDto} [createShelterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSheltersPost(
      createShelterDto?: CreateShelterDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shelter>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiSheltersPost(
        createShelterDto,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SheltersApi.apiSheltersPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} slug
     * @param {CreateShelterFeedbackDto} [createShelterFeedbackDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSheltersSlugFeedbackPost(
      slug: string,
      createShelterFeedbackDto?: CreateShelterFeedbackDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSheltersSlugFeedbackPost(
          slug,
          createShelterFeedbackDto,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SheltersApi.apiSheltersSlugFeedbackPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSheltersSlugGet(
      slug: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<ShelterDetailDto>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSheltersSlugGet(slug, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SheltersApi.apiSheltersSlugGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiSheltersSlugToggleSavePost(
      slug: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiSheltersSlugToggleSavePost(
          slug,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["SheltersApi.apiSheltersSlugToggleSavePost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * SheltersApi - factory interface
 * @export
 */
export const SheltersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = SheltersApiFp(configuration);
  return {
    /**
     *
     * @param {TemporaryCreateShelterInputModel} [temporaryCreateShelterInputModel]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersCreateTemporaryPost(
      temporaryCreateShelterInputModel?: TemporaryCreateShelterInputModel,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Shelter> {
      return localVarFp
        .apiSheltersCreateTemporaryPost(
          temporaryCreateShelterInputModel,
          options,
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .apiSheltersGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersIdDelete(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiSheltersIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {UpdateShelterDto} [updateShelterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersIdPut(
      id: string,
      updateShelterDto?: UpdateShelterDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiSheltersIdPut(id, updateShelterDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersPopulateSlugsPost(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiSheltersPopulateSlugsPost(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {CreateShelterDto} [createShelterDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersPost(
      createShelterDto?: CreateShelterDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Shelter> {
      return localVarFp
        .apiSheltersPost(createShelterDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} slug
     * @param {CreateShelterFeedbackDto} [createShelterFeedbackDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersSlugFeedbackPost(
      slug: string,
      createShelterFeedbackDto?: CreateShelterFeedbackDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiSheltersSlugFeedbackPost(slug, createShelterFeedbackDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersSlugGet(
      slug: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<ShelterDetailDto> {
      return localVarFp
        .apiSheltersSlugGet(slug, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiSheltersSlugToggleSavePost(
      slug: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiSheltersSlugToggleSavePost(slug, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SheltersApi - object-oriented interface
 * @export
 * @class SheltersApi
 * @extends {BaseAPI}
 */
export class SheltersApi extends BaseAPI {
  /**
   *
   * @param {TemporaryCreateShelterInputModel} [temporaryCreateShelterInputModel]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SheltersApi
   */
  public apiSheltersCreateTemporaryPost(
    temporaryCreateShelterInputModel?: TemporaryCreateShelterInputModel,
    options?: RawAxiosRequestConfig,
  ) {
    return SheltersApiFp(this.configuration)
      .apiSheltersCreateTemporaryPost(temporaryCreateShelterInputModel, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SheltersApi
   */
  public apiSheltersGet(options?: RawAxiosRequestConfig) {
    return SheltersApiFp(this.configuration)
      .apiSheltersGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SheltersApi
   */
  public apiSheltersIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return SheltersApiFp(this.configuration)
      .apiSheltersIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {UpdateShelterDto} [updateShelterDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SheltersApi
   */
  public apiSheltersIdPut(
    id: string,
    updateShelterDto?: UpdateShelterDto,
    options?: RawAxiosRequestConfig,
  ) {
    return SheltersApiFp(this.configuration)
      .apiSheltersIdPut(id, updateShelterDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SheltersApi
   */
  public apiSheltersPopulateSlugsPost(options?: RawAxiosRequestConfig) {
    return SheltersApiFp(this.configuration)
      .apiSheltersPopulateSlugsPost(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {CreateShelterDto} [createShelterDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SheltersApi
   */
  public apiSheltersPost(
    createShelterDto?: CreateShelterDto,
    options?: RawAxiosRequestConfig,
  ) {
    return SheltersApiFp(this.configuration)
      .apiSheltersPost(createShelterDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} slug
   * @param {CreateShelterFeedbackDto} [createShelterFeedbackDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SheltersApi
   */
  public apiSheltersSlugFeedbackPost(
    slug: string,
    createShelterFeedbackDto?: CreateShelterFeedbackDto,
    options?: RawAxiosRequestConfig,
  ) {
    return SheltersApiFp(this.configuration)
      .apiSheltersSlugFeedbackPost(slug, createShelterFeedbackDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} slug
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SheltersApi
   */
  public apiSheltersSlugGet(slug: string, options?: RawAxiosRequestConfig) {
    return SheltersApiFp(this.configuration)
      .apiSheltersSlugGet(slug, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} slug
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SheltersApi
   */
  public apiSheltersSlugToggleSavePost(
    slug: string,
    options?: RawAxiosRequestConfig,
  ) {
    return SheltersApiFp(this.configuration)
      .apiSheltersSlugToggleSavePost(slug, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * StatisticsApi - axios parameter creator
 * @export
 */
export const StatisticsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStatisticsGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Statistics`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * StatisticsApi - functional programming interface
 * @export
 */
export const StatisticsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    StatisticsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiStatisticsGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiStatisticsGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["StatisticsApi.apiStatisticsGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * StatisticsApi - factory interface
 * @export
 */
export const StatisticsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = StatisticsApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiStatisticsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .apiStatisticsGet(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * StatisticsApi - object-oriented interface
 * @export
 * @class StatisticsApi
 * @extends {BaseAPI}
 */
export class StatisticsApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof StatisticsApi
   */
  public apiStatisticsGet(options?: RawAxiosRequestConfig) {
    return StatisticsApiFp(this.configuration)
      .apiStatisticsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUsersAllUsersGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/Users/all-users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUsersGrantAdminIdPost: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiUsersGrantAdminIdPost", "id", id);
      const localVarPath = `/api/Users/grant-admin/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {TransferAdminDto} [transferAdminDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUsersRevokeAdminIdPost: async (
      id: string,
      transferAdminDto?: TransferAdminDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiUsersRevokeAdminIdPost", "id", id);
      const localVarPath = `/api/Users/revoke-admin/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        transferAdminDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUsersUserIdDelete: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("apiUsersUserIdDelete", "id", id);
      const localVarPath = `/api/Users/user/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Bearer required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUsersAllUsersGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiUsersAllUsersGet(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiUsersAllUsersGet"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUsersGrantAdminIdPost(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiUsersGrantAdminIdPost(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiUsersGrantAdminIdPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {TransferAdminDto} [transferAdminDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUsersRevokeAdminIdPost(
      id: string,
      transferAdminDto?: TransferAdminDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiUsersRevokeAdminIdPost(
          id,
          transferAdminDto,
          options,
        );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiUsersRevokeAdminIdPost"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiUsersUserIdDelete(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.apiUsersUserIdDelete(id, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UsersApi.apiUsersUserIdDelete"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUsersAllUsersGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
      return localVarFp
        .apiUsersAllUsersGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUsersGrantAdminIdPost(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiUsersGrantAdminIdPost(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {TransferAdminDto} [transferAdminDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUsersRevokeAdminIdPost(
      id: string,
      transferAdminDto?: TransferAdminDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiUsersRevokeAdminIdPost(id, transferAdminDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiUsersUserIdDelete(
      id: string,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .apiUsersUserIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiUsersAllUsersGet(options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .apiUsersAllUsersGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiUsersGrantAdminIdPost(id: string, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .apiUsersGrantAdminIdPost(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {TransferAdminDto} [transferAdminDto]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiUsersRevokeAdminIdPost(
    id: string,
    transferAdminDto?: TransferAdminDto,
    options?: RawAxiosRequestConfig,
  ) {
    return UsersApiFp(this.configuration)
      .apiUsersRevokeAdminIdPost(id, transferAdminDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public apiUsersUserIdDelete(id: string, options?: RawAxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .apiUsersUserIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
